// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('teste_nome_menor_3', function() {
  this.timeout(30000)
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('firefox').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('teste_nome_menor_3', async function() {
    await driver.get("http://localhost:8081/adicionar/evento")
    await driver.manage().window().setRect(1118, 776)
    await driver.findElement(By.id("nome")).click()
    await driver.findElement(By.id("nome")).sendKeys("A")
    await driver.findElement(By.css(".container:nth-child(6) > .row")).click()
    await driver.findElement(By.name("participantes_esperados")).click()
    await driver.findElement(By.name("participantes_esperados")).sendKeys("150")
    await driver.findElement(By.id("quantSalas")).click()
    await driver.findElement(By.id("quantSalas")).sendKeys("10")
    await driver.findElement(By.name("local_evento")).click()
    await driver.findElement(By.name("local_evento")).click()
    await driver.findElement(By.name("local_evento")).sendKeys("AABB de Piripiri")
    await driver.findElement(By.id("date")).click()
    await driver.findElement(By.id("date")).sendKeys("2020-01-21")
    await driver.findElement(By.name("data_termino")).click()
    await driver.findElement(By.name("data_termino")).sendKeys("2020-01-24")
    await driver.findElement(By.id("eventoTipo")).click()
    {
      const element = await driver.findElement(By.id("eventoTipo"))
      await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    }
    {
      const element = await driver.findElement(By.id("eventoTipo"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    {
      const element = await driver.findElement(By.id("eventoTipo"))
      await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    }
    await driver.findElement(By.id("eventoTipo")).click()
    {
      const dropdown = await driver.findElement(By.id("eventoTipo"))
      await dropdown.findElement(By.xpath("//option[. = 'Paga']")).click()
    }
    await driver.findElement(By.css("option:nth-child(3)")).click()
    {
      const element = await driver.findElement(By.id("eventoTipo"))
      await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    }
    {
      const element = await driver.findElement(By.id("eventoTipo"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    {
      const element = await driver.findElement(By.id("eventoTipo"))
      await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    }
    await driver.findElement(By.id("eventoTipo")).click()
    {
      const dropdown = await driver.findElement(By.id("eventoTipo"))
      await dropdown.findElement(By.xpath("//option[. = 'Gratuita']")).click()
    }
    await driver.findElement(By.css("option:nth-child(2)")).click()
    await driver.findElement(By.css("center:nth-child(11)")).click()
    await driver.findElement(By.css(".btn-outline-secondary")).click()
    await driver.findElement(By.css(".alert")).click()
    assert(await driver.findElement(By.css(".alert")).getText() == "ERRO!\\\\nNome do Evento")
  })
})
